<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc strict="no" ?>
<?rfc rfcedstyle="yes" ?>
<?rfc subcompact="no" ?>
<rfc
    xmlns:xi="http://www.w3.org/2001/XInclude"
    ipr="trust200902"
    category="info"
    docName="draft-handte-hybi-zstd-pcme-latest"
    obsoletes=""
    updates=""
    submissionType="IETF"
    xml:lang="en"
    tocInclude="true"
    symRefs="true"
    sortRefs="true"
    version="3">
  <front>
    <title abbrev="Zstd PCME">
      A Zstandard Per-Message Compression Extension for WebSocket
    </title>
    <seriesInfo name="Internet-Draft" value="draft-handte-hybi-zstd-pcme-latest"/>

    <author initials="W. F. P." surname="Handte" fullname="W. Felix P. Handte">
      <organization>Facebook, Inc.</organization>
      <address>
        <postal>
          <street>770 Broadway</street>
          <city>New York</city>
          <region>NY</region>
          <code>10003</code>
          <country>US</country>
        </postal>
        <email>w@felixhandte.com</email>
      </address>
    </author>

    <author initials="F" surname="Gasper" fullname="Felipe Gasper">
      <organization>[TODO]</organization>
      <address>
        <postal>
          <street>[TODO]</street>
          <city>[TODO]</city>
          <region>[TODO]</region>
          <code>[TODO]</code>
          <country>[TODO]</country>
        </postal>
        <email>felipe@felipegasper.com</email>
      </address>
    </author>

    <date/>
    <area>ART</area>
    <workgroup>Individual submission</workgroup>
    <keyword>Zstandard</keyword>
    <keyword>Zstd</keyword>
    <keyword>Compression</keyword>
    <keyword>WebSocket</keyword>

    <abstract>
      <t>
        This document defines a Per-Message Compression Extension <xref target="RFC7692"/> for the WebSocket Protocol <xref target="RFC6455"/> based on the Zstandard compression format <xref target="RFC8478"/>. This extension is then registered under the name <tt>permessage-zstd</tt>.
      </t>
      <t>
        <cref>TODO</cref>
      </t>
    </abstract>

    <note removeInRFC="true">
      <name>Draft Development</name>
      <!-- RFC Editor: Please remove this section before publication. -->
      <t>
        The source code and issues list for this draft can be found at <eref target="https://github.com/felixhandte/draft-handte-hybi-zstd-pcme"/>.
      </t>
    </note>
  </front>

  <middle>
    <section anchor="intro">
      <name>Introduction</name>
      <t>
        This document defines a Per-Message Compression Extension <xref target="RFC7692"/> for the WebSocket Protocol <xref target="RFC6455"/> that uses the Zstandard compressor <xref target="RFC8478"/>. This extension is identified by the name <tt>permessage-zstd</tt>.
      </t>
      <t>
        This extension is modeled on the <tt>permessage-deflate</tt> extension defined in <xref target="RFC7692"/>. It attempts as much as possible to present a compatible interface to its users, differing primarily internally (in the use of a different underlying compression scheme and then how it maps the same options and semantics as the <tt>permessage-deflate</tt> extension to that different compression scheme). These differences are listed in <xref target="differences"/>.
      </t>
    </section>

    <section anchor="defs">
      <name>Definitions</name>
      <section anchor="defs-reqs">
        <name>Requirements</name>
        <t>
          The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
          appear in all capitals, as shown here.
        </t>
      </section>
      <section anchor="defs-ws">
        <name>WebSocket</name>
        <t>
          This document references the procedure to <em>Fail the WebSocket Connection</em>. This procedure is defined in <xref target="RFC6455" section="7.1.7"/>.
        </t>
        <t>
          This document references the event that <em>The WebSocket Connection is Established</em> and the event that <em>A WebSocket Message Has Been Received</em>. These events are defined in Sections <relref section="4.1" target="RFC6455" displayFormat="bare"/> and <relref section="6.2" target="RFC6455" displayFormat="bare"/>, respectively, of <xref target="RFC6455"/>.
        </t>
      </section>
      <section anchor="defs-zstd">
        <name>Zstandard</name>
        <t>
          This document uses the terms <em>Zstd Frame</em>, <em>Zstd Skippable Frame</em>, and <em>Zstd Block</em> to refer respectively to the <em>Zstandard Frame</em> defined in Section <relref section="3.1.1" target="RFC8478" displayFormat="bare"/>, the <em>Skippable Frame</em> defined in Section <relref section="3.1.2" target="RFC8478" displayFormat="bare"/>, and the <em>Block</em> defined in Section <relref section="3.1.1.2" target="RFC8478" displayFormat="bare"/> of <xref target="RFC8478"/>.
        </t>
      </section>
    </section>

    <section anchor="extension">
      <name>The <tt>permessage-zstd</tt> Extension</name>
      <t>
        Four extension parameters are defined for <tt>permessage-zstd</tt> to help endpoints negotiate constraints on how much history will have to be retained in order to be able to decompress new messages.
      </t>
      <ul>
        <li><tt>server_no_context_takeover</tt></li>
        <li><tt>client_no_context_takeover</tt></li>
        <li><tt>server_max_window_bits</tt></li>
        <li><tt>client_max_window_bits</tt></li>
      </ul>
      <t>
        Although both the context takeover and window size controls target the same broad goal of constraining history retention requirements, they do so in different ways. These two methods are independently useful.
      </t>
      <t>
        <cref>TODO</cref>
      </t>
    </section>

    <section anchor="extension-params">
      <name>Extension Parameters</name>
      <t>
        <cref>TODO</cref>
      </t>
      <section anchor="extension-param-server-no-context-takeover">
        <name><tt>server_no_context_takeover</tt></name>
        <t>
          This option has the same semantics, behavior, and requirements as the parameter of the same name defined in <relref section="7.1.1.1" target="RFC7692"/>.
        </t>
        <t>
          <cref>TODO</cref>
        </t>
      </section>
      <section anchor="extension-param-client-no-context-takeover">
        <name><tt>client_no_context_takeover</tt></name>
        <t>
          This option has the same semantics, behavior, and requirements as the parameter of the same name defined in <relref section="7.1.1.2" target="RFC7692"/>.
        </t>
        <t>
          <cref>TODO</cref>
        </t>
      </section>
      <section anchor="extension-param-server-max-window-bits">
        <name><tt>server_max_window_bits</tt></name>
        <t>
          This option has the same semantics, behavior, and requirements as the parameter of the same name defined in <relref section="7.1.2.1" target="RFC7692"/>, with the following exceptions:
        </t>
        <ul>
          <li>
            The parameter's minimum value is 10 and its maximum value is 31.
          </li>
          <li>
            A server which receives this option <bcp14>MUST</bcp14> either decline the extension negotiation or accept the parameter.
            <cref>
              I believe this is what the deflate extension intends to specify, but it's not 100% clear.
            </cref>
          </li>
        </ul>
        <t>
          <cref>TODO</cref>
        </t>
      </section>
      <section anchor="extension-param-client-max-window-bits">
        <name><tt>client_max_window_bits</tt></name>
        <t>
          This option has the same semantics, behavior, and requirements as the parameter of the same name defined in <relref section="7.1.2.2" target="RFC7692"/>, with the exception that the parameter's minimum value is 10 and the maximum value is 31.
        </t>
        <t>
          <cref>TODO</cref>
        </t>
      </section>
      <section anchor="extension-param-server-no-zstd-magic">
        <name><tt>server_no_zstd_magic</tt></name>
        <t>
          <em>Zstd Frames</em> normally begin with a fixed four byte prefix (hexadecimal <tt>28 B5 2F FD</tt>). This extension parameter signals that the server can and will...
        </t>
        <t>
          <cref>TODO</cref>
        </t>
      </section>
      <section anchor="extension-param-client-no-zstd-magic">
        <name><tt>client_no_zstd_magic</tt></name>
        <t>

        </t>
        <t>
          <cref>TODO</cref>
        </t>
      </section>
    </section>

    <section anchor="transformation">
      <name>Message Transformation</name>
      <section anchor="encoding">
        <name>Encoding</name>
        <t>
          A sender using the <tt>permessage-zstd</tt> extension encodes a message by performing Zstandard compression on the payload of the message. The resulting encoded message is subject to the following constraints:
        </t>
        <t>
          The concatenation of all compressed message payloads sent by a peer over the lifetime of the WebSocket connection <bcp14>MUST</bcp14> form a sequence of zero or more <em>Zstd Frames</em> and <em>Zstd Skippable Frames</em>.
        </t>
        <t>
          Sometimes, as described in <xref target="encoding-dependent-payloads"/>, a single <em>Zstd Frame</em> can be held open across messages and used to compress their contents in a single stream. Even when in this mode, each encoded message payload <bcp14>MUST</bcp14> represent exactly the content of the message payload it encodes. That is, a <em>Zstd Frame</em> that is held open <bcp14>MUST</bcp14> nonetheless be flushed at every message payload boundary.
        </t>
        <t>
          Note: an empty output is a valid representation of an empty input.
        </t>
        <t>
          The specific configuration of Zstandard for this compression is partially defined by the extension parameters defined in <xref target="extension-params"/>.
        </t>
        <t>
          <cref>TODO</cref>
        </t>
        <section anchor="encoding-fragments">
          <name>Fragmentation</name>
          <t>
            Encoded message payloads <bcp14>MAY</bcp14> be arbitrarily fragmented by the WebSocket transport. As an <bcp14>OPTIONAL</bcp14> optimization, implementations <bcp14>MAY</bcp14> align <em>Zstd Block</em> boundaries with WebSocket Fragment boundaries.
          </t>
        </section>
        <section anchor="encoding-window">
          <name>Window</name>
          <t>
            <cref>The <em>Sending Window Size</em> is controls the amount of memory required to compress and decompress a stream of messages. For servers, their <em>Sending Window Size</em> an internal parameter  by each peer. For servers, if the  from the connection's <tt>agreed parameters</tt> set. The server's <em>Window Size</em> is </cref>
          </t>
          <t>
            In the absence of negotiation, to aid interoperability, it is <bcp14>RECOMMENDED</bcp14> that sender's use a <em>Window Size</em> no larger than 8 MB.
          </t>
          <t>
            Note that although the <tt>permessage-zstd</tt> extension negotiates compression in both directions simultaneously, once negotiated, the encoding of messages sent in one direction is independent of messages sent in the other. That is, the stream history used as context in the compression of a message is the ordered concatenation of encoded messages sent in that same direction, not all messages sent in the WebSocket connection.
          </t>
        </section>
        <section anchor="encoding-dependency">
          <name>Inter-Payload Dependencies</name>
          <section anchor="encoding-dependent-payloads">
            <name>Dependent Payloads</name>
            <t>
              Since <em>Zstd Frames</em> are independent of one another, a sender that wishes to emit payloads that exploit the stream's history must hold a <em>Zstd Frame</em> open between WebSocket payloads.
            </t>
            <t>
              In this mode, the sender <bcp14>MAY</bcp14> end a <em>Zstd Frame</em> (and subsequently begin another) at any time. (However, the <em>Zstd Frame Header</em> <bcp14>SHOULD NOT</bcp14> be split between payloads or fragments. <cref>Should this be a requirement?</cref>) Each encoded WebSocket message payload <bcp14>MUST</bcp14> instead begin and end at a <em>Zstd Block</em> boundary. That is, in <em>independent payloads</em> mode, neither <em>Zstd Frames</em> nor <em>Zstd Blocks</em> can be split between WebSocket payloads. When not in <em>independent payloads</em> mode, <em>Zstd Frames</em> can be split, but <em>Zstd Blocks</em> still must not be.
            </t>
            <t>
              Messages that are sent un-encoded (with <tt>Per-Message Compressed</tt> bit equal to 0) do not participate in the context history used to compress subsequent messages.
            </t>
            <section anchor="encoding-dependent-payloads-example">
              <name>Example</name>
              <t>
                <cref>TODO</cref>
              </t>
              <artwork>
  WebSocket Payloads:  [......][..........][............]
  WebSocket Frames:    [......][....][....][.....][.....]
  WebSocket Fragments: [..][..][.][.][....][..][.][.....]
  Zstd Frames:         [..........][....................]
  Zstd Blocks:         [..][..][..][..][..][..][..][..][]
              </artwork>
            </section>
          </section>
          <section anchor="encoding-independent-payloads">
            <name>Independent Payloads</name>
            <t>
              A server <bcp14>MUST</bcp14> produce <em>independent payloads</em> if the <tt>agreed parameters</tt> contain the <tt>server_no_context_takeover</tt> option. Otherwise, a server <bcp14>MAY</bcp14> produce <em>independent payloads</em>.
            </t>
            <t>
              A client <bcp14>MUST</bcp14> produce <em>independent payloads</em> if the <tt>agreed parameters</tt> contain the <tt>client_no_context_takeover</tt> option. Otherwise, a client <bcp14>MAY</bcp14> produce <em>independent payloads</em>.
            </t>
            <t>
              When producing an <em>independent payload</em>, each encoded message payload <bcp14>MUST</bcp14> be composed of zero or more complete <em>Zstd Frames</em> or <em>Zstd Skippable Frames</em>.
            </t>
            <t>
              The constraints imposed by the negotiated window size still apply.
            </t>
          </section>
        </section>
        <section anchor="encoding-magic">
          <name>Magic-Less Frames</name>
          <t>
            If the <tt>server_no_zstd_magic</tt> option appears in the <tt>agreed parameters</tt> set for a connection, a server <bcp14>MUST</bcp14> produce <em>magic-less frames</em>, otherwise the server <bcp14>MUST NOT</bcp14> produce <em>magic-less frames</em>.
          </t>
          <t>
            If the <tt>client_no_zstd_magic</tt> option appears in the <tt>agreed parameters</tt> set for a connection, a client <bcp14>MUST</bcp14> produce <em>magic-less frames</em>, otherwise the client <bcp14>MUST NOT</bcp14> produce <em>magic-less frames</em>.
          </t>
          <t>
            If a sender has negotiated the use of <em>magic-less frames</em>,
            the first four bytes of a <em>Zstd Frame</em> are stripped. Without this identifier, it is no longer possible to distinguish <em>Zstd Frames</em> and <em>Zstd Skippable Frames</em>. For this reason, when producing <em>magic-less frames</em>, a sender <bcp14>MUST NOT</bcp14> emit <em>Zstd Skippable Frames</em>.
          </t>
        </section>
      </section>
      <section anchor="decoding">
        <name>Decoding</name>
        <t>
          <cref>TODO</cref>
        </t>
        <t>
          A decoder <bcp14>MUST</bcp14> accept compressed payloads comprised of multiple <em>Zstd Frames</em>.
        </t>

        <section anchor="decoding-window">
          <name>Window</name>
          <t>
            The <em>Window Size</em>
          </t>
          <t>
            If a peer is unwilling to receive content with an arbitrarily large <em>Window Size</em> (in particular, up to 8 MB), the peer <bcp14>SHOULD</bcp14> send an appropriate <tt>server_max_window_bits</tt> or <tt>client_max_window_bits</tt> parameter during connection negotiation.
          </t>
          <t>
            The <em>Required Window</em> of a <em>Zstd Frame</em>, which describes how much memory must be allocated to be able to decompress the frame, is the <em>Window_Size</em> derived from the frame's <em>Window_Descriptor</em> (<relref section="3.1.1.1.2" target="RFC8478"/>) if the <em>Single_Segment_Flag</em> (<relref section="3.1.1.1.1.2" target="RFC8478"/>) is unset, or the <em>Frame_Content_Size</em> (<relref section="3.1.1.1.1.1" target="RFC8478"/>) if the <em>Single_Segment_Flag</em> is set.
          </t>
          <t>
            If a peer receives a <em>Zstd Frame</em> whose <em>Required Window</em> is larger than the <em>Window Size</em> negotiated for the sender, the peer <bcp14>SHOULD</bcp14> <em>Fail the WebSocket Connection</em>.
          </t>
          <t>
            Otherwise, if no <em>Window Size</em> was negotiated, and a peer receives a <em>Zstd Frame</em> whose <em>Required Window</em> is larger than they are willing to handle, the peer <bcp14>MAY</bcp14> <em>Fail the WebSocket Connection</em>.
          </t>
        </section>
        <section anchor="decoding-magic">
          <name>Magic-Less Frames</name>
          <t>
            If a receiver has negotiated the use of <em>magic-less frames</em>,
            every frame is assumed to be a <em>Zstd Frame</em>
          </t>
        </section>
      </section>
    </section>

    <section anchor="differences">
      <name>Differences from <tt>permessage-deflate</tt></name>
      <t>
        Note: this section is <strong>non-normative</strong>.
      </t>
      <ul>
        <li>
          The <tt>server_max_window_bits</tt> and <tt>client_max_window_bits</tt> parameters have a different range of valid values (10 to 31, rather than 8 to 15).
        </li>
        <li>
          The <tt>permessage-deflate</tt> extension (like its corresponding HTTP Content-Coding, defined in <relref section="4.2.2" target="RFC7230"/>) requires the use of a single deflate frame, which is divided into blocks. In contrast, this extension (like its corresponding HTTP Content-Coding, defined in <relref section="6.2" target="RFC8478"/>) permits the use of many <em>Zstd Frames</em> over the lifetime of a connection.
        </li>
        <li>
          No truncation of the output produced by the underlying compressor is performed by the encoder. Similarly, no static suffix is added by the decoder to the compressed payload before being passed to the underlying compressor to be decompressed.
        </li>
      </ul>
    </section>

    <section anchor="iana">
      <name>IANA Considerations</name>
      <section anchor="iana-websocket-extension-registry">
        <name>WebSocket Extension Name</name>
        <t>
          IANA is requested to register the following WebSocket extension name in the "WebSocket Extension Name Registry" defined in <xref target="RFC6455"/>.
        </t>
        <dl>
          <dt>Extension Identifier:</dt>
          <dd><tt>permessage-zstd</tt></dd>
          <dt>Extension Common Name:</dt>
          <dd>WebSocket Per-Message Compression using Zstandard</dd>
          <dt>Extension Definition:</dt>
          <dd>This document</dd>
          <dt>Known Incompatible Extensions:</dt>
          <dd>None</dd>
        </dl>
        <t>
          The <tt>permessage-zstd</tt> extension name is used in the <tt>Sec-WebSocket-Extensions</tt> header in the WebSocket opening handshake to negotiate use of the <tt>permessage-zstd</tt> extension.
        </t>
      </section>
    </section>

    <section anchor="security">
      <name>Security Considerations</name>
      <t>
        <cref>TODO</cref>
      </t>
      <t>
        <xref target="CRIME"/>
        <xref target="DICT-SEC"/>
      </t>
    </section>

    <section anchor="future-work">
      <name>Future Work</name>
      <t>
        <cref>TODO</cref>
      </t>
      <section anchor="future-work-independent-negotiation">
        <name>Independent Negotiation for Each Direction</name>
        <t>
          <cref>TODO</cref>
        </t>
      </section>
      <section anchor="future-work-dictionaries">
        <name>Dictionaries</name>
        <t>
          <cref>TODO</cref>
        </t>
      </section>
    </section>
  </middle>

  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>

        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <seriesInfo name="DOI" value="10.17487/RFC2119"/>
            <seriesInfo name="RFC" value="2119"/>
            <seriesInfo name="BCP" value="14"/>
            <author initials="S." surname="Bradner" fullname="Scott Bradner">
              <organization>Harvard University</organization>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t>
              In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.
              </t>
            </abstract>
          </front>
        </reference>

        <reference anchor="RFC6455" target="https://www.rfc-editor.org/info/rfc6455">
          <front>
            <title>The WebSocket Protocol</title>
            <seriesInfo name="DOI" value="10.17487/RFC6455"/>
            <seriesInfo name="RFC" value="6455"/>
            <author initials="I." surname="Fette" fullname="I. Fette">
              <organization>Google, Inc.</organization>
            </author>
            <author initials="A." surname="Melnikov" fullname="A. Melnikov">
              <organization>Isode Ltd.</organization>
            </author>
            <date year="2011" month="December"/>
            <abstract>
              <t>
              The WebSocket Protocol enables two-way communication between a client running untrusted code in a controlled environment to a remote host that has opted-in to communications from that code. The security model used for this is the origin-based security model commonly used by web browsers. The protocol consists of an opening handshake followed by basic message framing, layered over TCP. The goal of this technology is to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections (e.g., using XMLHttpRequest or &lt;iframe&gt;s and long polling).
              </t>
            </abstract>
          </front>
        </reference>

        <reference anchor="RFC7692" target="https://www.rfc-editor.org/info/rfc7692">
          <front>
            <title>Compression Extensions for WebSocket</title>
            <seriesInfo name="DOI" value="10.17487/RFC7692"/>
            <seriesInfo name="RFC" value="7692"/>
            <author initials="T." surname="Yoshino" fullname="T. Yoshino">
              <organization>Google, Inc.</organization>
            </author>
            <date year="2015" month="December"/>
            <abstract>
              <t>
              This document defines a framework for creating WebSocket extensions that add compression functionality to the WebSocket Protocol. An extension based on this framework compresses the payload data portion of WebSocket data messages on a per-message basis using parameters negotiated during the opening handshake. This framework provides a general method for applying a compression algorithm to the contents of WebSocket messages. Each compression algorithm has to be defined in a document defining the extension by specifying the parameter negotiation and the payload transformation algorithm in detail. This document also specifies one specific compression extension using the DEFLATE algorithm.
              </t>
            </abstract>
          </front>
        </reference>

        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author initials="B." surname="Leiba" fullname="Barry Leiba">
            </author>
            <date year="2017" month="May"/>
            <abstract>
              <t>
                RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.
              </t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>

        <reference anchor="RFC8478" target="https://www.rfc-editor.org/info/rfc8478">
          <front>
            <title>Zstandard Compression and the application/zstd Media Type</title>
            <seriesInfo name="DOI" value="10.17487/RFC8478"/>
            <seriesInfo name="RFC" value="8478"/>
            <author initials="Y." surname="Collet" fullname="Y. Collet">
              <organization>Facebook, Inc.</organization>
            </author>
            <author initials="M." surname="Kucherawy" fullname="M. Kucherawy" role="editor">
              <organization>Facebook, Inc.</organization>
            </author>
            <date year="2018" month="October"/>
            <abstract>
              <t>
              Zstandard, or "zstd" (pronounced "zee standard"), is a data compression mechanism. This document describes the mechanism and registers a media type and content encoding to be used when transporting zstd-compressed content via Multipurpose Internet Mail Extensions (MIME).
              </t>
              <t>
              Despite use of the word "standard" as part of its name, readers are advised that this document is not an Internet Standards Track specification; it is being published for informational purposes only.
              </t>
            </abstract>
          </front>
        </reference>
      </references>

      <references>
        <name>Informative References</name>

        <reference anchor="CRIME" target="https://www.ekoparty.org/archive/2012/CRIME_ekoparty2012.pdf">
          <front>
            <title>Compression Ratio Info-leak Made Easy</title>
            <author initials="J." surname="Rizzo" fullname="Juliano Rizzo"/>
            <author initials="T." surname="Duong" fullname="Thai Duong"/>
            <date year="2012"/>
          </front>
        </reference>

        <reference anchor="DICT-SEC">
          <front>
            <title>Security Considerations Regarding Compression Dictionaries</title>
            <author initials='W. F. P.' surname='Handte' fullname='W. Felix P. Handte'>
              <organization>Facebook, Inc.</organization>
            </author>
            <date month="October" year="2019"/>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-handte-httpbis-dict-sec"/>
        </reference>

        <reference anchor="RFC7230" target="https://www.rfc-editor.org/info/rfc7230">
          <front>
            <title>
              Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing
            </title>
            <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor" />
            <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor" />
            <date year="2014" month="June"/>
            <abstract>
              <t>
                The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document provides an overview of HTTP architecture and its associated terminology, defines the "http" and "https" Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.
              </t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7230"/>
          <seriesInfo name="DOI" value="10.17487/RFC7230"/>
        </reference>
      </references>
    </references>
  </back>
</rfc>
